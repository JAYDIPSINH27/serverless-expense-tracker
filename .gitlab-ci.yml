stages:
  - zip-resources
  - pre-deployment
  - publish
  - deploy-cloudformation
  - deploy-frontend

cache:
  key: env_variables
  paths:
    - env_variables.env

zip-resources:
  when: manual
  stage: zip-resources
  image: node:latest
  script:
    - apt-get update
    - apt-get install -y zip
    - find backend/AWS -type d -not -path "*/\.*" | while read dir; do
        if [ -f "$dir/package.json" ]; then
          cd $dir
          npm install
          cd -
        fi
        zip_name=$(echo $dir | sed 's/\//_/g').zip
        zip -r $zip_name $dir
      done
  artifacts:
    paths:
      - "*.zip"

pre-deployment:
  when: manual
  stage: pre-deployment
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  script:
    - aws s3api create-bucket --bucket my-predeployment-bucket --region us-east-1 || echo "Bucket already exists"
    - for file in *.zip; do
        aws s3 cp $file s3://my-predeployment-bucket/
      done
  artifacts:
    paths:
      - env_variables.env
  cache:
    paths:
      - env_variables.env

publish-frontend:
  when: manual
  stage: publish
  image: docker:latest
  tags:
    - dalfcs_gitlab_docker_ci
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: "tcp://docker:2375"
  services:
    - "docker:dind"
  script:
    - cd frontend/
    - pwd
    - ls
    - docker --version
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PWD
    - docker build -t b00977003/serverless-expense-tracker . -f Dockerfile
    - docker push b00977003/serverless-expense-tracker
  only:
    - main

deploy-cloudformation:
  when: manual
  stage: deploy-cloudformation
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  script:
    - pwd
    - aws --version
    - aws cloudformation deploy --template-file ./IaC/CloudFormation.yml --stack-name my-stack --parameter-overrides InstanceType=t2.micro KeyName=key-pair InstanceName=MyEC2Instance --capabilities CAPABILITY_NAMED_IAM
    - echo "Saving environment variables to dotenv file"
    - export REACT_APP_USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name my-stack --query "Stacks[0].Outputs[?OutputKey=='UserPoolId'].OutputValue" --output text)
    - export REACT_APP_CLIENT_ID=$(aws cloudformation describe-stacks --stack-name my-stack --query "Stacks[0].Outputs[?OutputKey=='UserPoolClientId'].OutputValue" --output text)
    - export REACT_APP_BASE_URL=$(aws cloudformation describe-stacks --stack-name my-stack --query "Stacks[0].Outputs[?OutputKey=='ApiGatewayUrl'].OutputValue" --output text)
    - export EC2_PUBLIC_IP=$(aws cloudformation describe-stacks --stack-name my-stack --query "Stacks[0].Outputs[?OutputKey=='EC2PublicIP'].OutputValue" --output text)
    - echo "REACT_APP_USER_POOL_ID=$REACT_APP_USER_POOL_ID" > env_variables.env
    - echo "REACT_APP_CLIENT_ID=$REACT_APP_CLIENT_ID" >> env_variables.env
    - echo "REACT_APP_BASE_URL=$REACT_APP_BASE_URL" >> env_variables.env
    - echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> env_variables.env
  artifacts:
    paths:
      - env_variables.env
  cache:
    paths:
      - env_variables.env
  only:
    - main

deploy-frontend:
  when: manual
  stage: deploy-frontend
  image: alpine:latest
  before_script:
    - apk update && apk add openssh-client
    - eval $(ssh-agent -s)
    - chmod 600 $SSH_PRIVATE_KEY
    - ssh-add $SSH_PRIVATE_KEY
  script:
    - echo "Fetching environment variables from cache"
    - if [ -f env_variables.env ]; then source env_variables.env; else echo "No env_variables.env found"; exit 1; fi
    - echo "Attempting to SSH into $EC2_PUBLIC_IP"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_PUBLIC_IP "echo Connection established"
    - echo "Pulling Docker image"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_PUBLIC_IP "docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PWD docker.io"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_PUBLIC_IP "docker pull b00977003/serverless-expense-tracker"
    - echo "Stopping any running containers"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_PUBLIC_IP "docker stop expense-tracker || true"
    - echo "Removing any stopped containers"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_PUBLIC_IP "docker rm expense-tracker || true"
    - echo "Running the new container"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_PUBLIC_IP "docker run -d -e REACT_APP_BASE_URL=$REACT_APP_BASE_URL -e REACT_APP_USER_POOL_ID=$REACT_APP_USER_POOL_ID -e REACT_APP_CLIENT_ID=$REACT_APP_CLIENT_ID -p 80:3000 --name expense-tracker b00977003/serverless-expense-tracker"
  artifacts:
    paths:
      - env_variables.env
  cache:
    paths:
      - env_variables.env
  only:
    - main
