stages:
  - publish
  - deploy-frontend

publish-frontend:
  when: manual
  stage: publish
  image: docker:latest
  tags:
    - dalfcs_gitlab_docker_ci
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: "tcp://docker:2375"
  services:
    - "docker:dind"
  script:
    - cd frontend/
    - pwd
    - ls
    - docker --version
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PWD
    - docker build -t b00977003/serverless-expense-tracker . -f Dockerfile
    - docker push b00977003/serverless-expense-tracker
  only:
    - test

deploy-frontend:
  stage: deploy-frontend
  image: alpine:latest
  before_script:
    - apk update && apk add openssh-client
    - eval $(ssh-agent -s)
    - chmod 600 $SSH_PRIVATE_KEY 
    - ssh-add $SSH_PRIVATE_KEY 
  script:
    - echo "Attempting to SSH into $EC2_HOST"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_HOST "echo Connection established"
    - echo "Pulling Docker image"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_HOST "docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PWD docker.io"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_HOST "docker pull b00977003/serverless-expense-tracker"
    - echo "Stopping any running containers"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_HOST "docker stop expense-tracker || true"
    - echo "Removing any stopped containers"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_HOST "docker rm expense-tracker || true"
    - echo "Running the new container"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_HOST "docker run -d -p 80:80 --name expense-tracker b00977003/serverless-expense-tracker"
  only:
    - main