# Author: Jaydipsinh Padhiyar (B00977003)
AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create Cognito resources, Lambda functions, API Gateway, and launch an EC2 instance to build and run a Docker container.

#demo
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
# Cloud Formation Template to create the following resources:
# - DynamoDB Tables
# - S3 Bucket
# - Lambda Functions
# - Cognito User Pool
# - API Gateway
# - Deployment
# - Integrations
# - EC2 Instance
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# API Linking
# /expense
# -get
# -post

# /image
# -post

# /extract
# -post

# /user
# -post

# /userget by id
# -post

# /profile
# -post

# Other Linking
# Cognito with Register and Login Notification
# DynamoDB with Expense Notification
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceName:
    Description: Name for the EC2 instance
    Type: String
    Default: MyEC2Instance

Resources:

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# DynamoDB Tables
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  ExpenseDataTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: 'expense-tracker-data'
      AttributeDefinitions:
        - AttributeName: 'expenseId'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'expenseId'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: 'NEW_IMAGE'

  UserDataTable:
    Type: 'AWS::DynamoDB::Table'
    Properties: 
      TableName: 'expense-tracker-users'
      AttributeDefinitions: 
        - AttributeName: 'userid'
          AttributeType: 'S'
      KeySchema: 
        - AttributeName: 'userid'
          KeyType: 'HASH'
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# S3 Bucket
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties: 
      BucketName: 'expense-tracker-images'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false

  PublicAccessBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource:
              - !Sub 'arn:aws:s3:::${MyS3Bucket}/*'
              - !Sub 'arn:aws:s3:::${MyS3Bucket}'

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Lambda Functions
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  ExpensePostLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'ExpensePostLambda'
      Handler: 'index.handler'
      Role: 'arn:aws:iam::328011242958:role/LabRole' 
      Code:
        S3Bucket: 'expense-tracker-lambda-bucket'
        S3Key: 'expense-POST.zip' 
      Runtime: 'nodejs18.x' 
      Timeout: 300
      MemorySize: 128

  ExpenseGetLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'ExpenseGetLambda'
      Handler: 'index.handler'
      Role: 'arn:aws:iam::328011242958:role/LabRole'
      Code:
        S3Bucket: 'expense-tracker-lambda-bucket'
        S3Key: 'expense-GET.zip'  
      Runtime: 'nodejs18.x' 
      Timeout: 300
      MemorySize: 128

  UserPostLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'UserPostLambda'
      Handler: 'index.handler'
      Role: 'arn:aws:iam::328011242958:role/LabRole'
      Code:
        S3Bucket: 'expense-tracker-lambda-bucket'
        S3Key: 'user-POST.zip'  
      Runtime: 'nodejs18.x' 
      Timeout: 300
      MemorySize: 128

  UserGetPostLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'UserGetPostLambda'
      Handler: 'index.handler'
      Role: 'arn:aws:iam::328011242958:role/LabRole'
      Code:
        S3Bucket: 'expense-tracker-lambda-bucket'
        S3Key: 'userGet-POST.zip'  
      Runtime: 'nodejs18.x' 
      Timeout: 300
      MemorySize: 128

  ImagePostLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'ImagePostLambda'
      Handler: 'index.handler'
      Role: 'arn:aws:iam::328011242958:role/LabRole'
      Code:
        S3Bucket: 'expense-tracker-lambda-bucket'
        S3Key: 'image-POST.zip'  
      Runtime: 'nodejs18.x' 
      Timeout: 300
      MemorySize: 128

  ExtractPostLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'ExtractPostLambda'
      Handler: 'index.handler'
      Role: 'arn:aws:iam::328011242958:role/LabRole'
      Code:
        S3Bucket: 'expense-tracker-lambda-bucket'
        S3Key: 'extractTotal-POST.zip'  
      Runtime: 'nodejs18.x' 
      Timeout: 300
      MemorySize: 128

  ProfilePostLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'ProfilePostLambda'
      Handler: 'index.handler'
      Role: 'arn:aws:iam::328011242958:role/LabRole'
      Code:
        S3Bucket: 'expense-tracker-lambda-bucket'
        S3Key: 'profile-POST.zip'  
      Runtime: 'nodejs18.x' 
      Timeout: 300
      MemorySize: 128

  RegisterNotificationLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'RegisterNotificationLambda'
      Handler: 'index.handler'
      Role: 'arn:aws:iam::328011242958:role/LabRole'
      Code:
        S3Bucket: 'expense-tracker-lambda-bucket'
        S3Key: 'extralambda-RegisterNotification.zip'  
      Runtime: 'nodejs18.x' 
      Timeout: 300
      MemorySize: 128

  LoginNotificationLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'LoginNotificationLambda'
      Handler: 'index.handler'
      Role: 'arn:aws:iam::328011242958:role/LabRole'
      Code:
        S3Bucket: 'expense-tracker-lambda-bucket'
        S3Key: 'extralambda-LoginNotification.zip'  
      Runtime: 'nodejs18.x' 
      Timeout: 300
      MemorySize: 128

  ExpenseNotificationLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'ExpenseNotificationLambda'
      Handler: 'index.handler'
      Role: 'arn:aws:iam::328011242958:role/LabRole'
      Code:
        S3Bucket: 'expense-tracker-lambda-bucket'
        S3Key: 'extralambda-ExpenseNotification.zip'  
      Runtime: 'nodejs18.x' 
      Timeout: 300
      MemorySize: 128

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Cognito User Pool
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties: 
      UserPoolName: "MyUserPool"
      LambdaConfig:
        PostConfirmation:
          Fn::GetAtt: [RegisterNotificationLambda, Arn]
        PostAuthentication:
          Fn::GetAtt: [LoginNotificationLambda, Arn]
      AutoVerifiedAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: true
      EmailVerificationMessage: "Your verification code is {####}"
      EmailVerificationSubject: "Your verification code"
      UsernameAttributes:
        - email

  CognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      UserPoolId:
        Ref: "CognitoUserPool"
      ClientName: "MyUserPoolClient"
      GenerateSecret: false

  CognitoUserPoolDomain:
    Type: "AWS::Cognito::UserPoolDomain"
    Properties:
      Domain: "expense-users"
      UserPoolId:
        Ref: "CognitoUserPool"

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# API Gateway 
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  ApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'MyApi'

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Expense API
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  ExpenseResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      PathPart: 'expense'
      RestApiId:
        Ref: 'ApiGatewayRestApi'

  ExpensePostMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId:
        Ref: 'ExpenseResource'
      RestApiId:
        Ref: 'ApiGatewayRestApi'
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
            - LambdaArn:
                Fn::GetAtt:
                  - ExpensePostLambda
                  - Arn
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ExpenseGetMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'GET'
      ResourceId:
        Ref: 'ExpenseResource'
      RestApiId:
        Ref: 'ApiGatewayRestApi'
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
            - LambdaArn:
                Fn::GetAtt:
                  - ExpenseGetLambda
                  - Arn
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ExpenseOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'OPTIONS'
      ResourceId:
        Ref: 'ExpenseResource'
      RestApiId:
        Ref: 'ApiGatewayRestApi'
      Integration:
        Type: 'MOCK'
        RequestTemplates:
          application/json: '{statusCode:200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# User API
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  UserResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      PathPart: 'user'
      RestApiId:
        Ref: 'ApiGatewayRestApi'

  UserPostMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId:
        Ref: 'UserResource'
      RestApiId:
        Ref: 'ApiGatewayRestApi'
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
            - LambdaArn:
                Fn::GetAtt:
                  - UserPostLambda
                  - Arn
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  UserOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'OPTIONS'
      ResourceId:
        Ref: 'UserResource'
      RestApiId:
        Ref: 'ApiGatewayRestApi'
      Integration:
        Type: 'MOCK'
        RequestTemplates:
          application/json: '{statusCode:200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# New UserGet API
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  UserGetResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      PathPart: 'userget'
      RestApiId:
        Ref: 'ApiGatewayRestApi'

  UserGetPostMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId:
        Ref: 'UserGetResource'
      RestApiId:
        Ref: 'ApiGatewayRestApi'
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
            - LambdaArn:
                Fn::GetAtt:
                  - UserGetPostLambda
                  - Arn
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  UserGetOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'OPTIONS'
      ResourceId:
        Ref: 'UserGetResource'
      RestApiId:
        Ref: 'ApiGatewayRestApi'
      Integration:
        Type: 'MOCK'
        RequestTemplates:
          application/json: '{statusCode:200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Profile API
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  ProfileResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      PathPart: 'profile'
      RestApiId:
        Ref: 'ApiGatewayRestApi'

  ProfilePostMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId:
        Ref: 'ProfileResource'
      RestApiId:
        Ref: 'ApiGatewayRestApi'
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
            - LambdaArn:
                Fn::GetAtt:
                  - ProfilePostLambda
                  - Arn
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ProfileOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'OPTIONS'
      ResourceId:
        Ref: 'ProfileResource'
      RestApiId:
        Ref: 'ApiGatewayRestApi'
      Integration:
        Type: 'MOCK'
        RequestTemplates:
          application/json: '{statusCode:200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Extract API
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  ExtractResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      PathPart: 'extract'
      RestApiId:
        Ref: 'ApiGatewayRestApi'

  ExtractPostMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId:
        Ref: 'ExtractResource'
      RestApiId:
        Ref: 'ApiGatewayRestApi'
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
            - LambdaArn:
                Fn::GetAtt:
                  - ExtractPostLambda
                  - Arn
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ExtractOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'OPTIONS'
      ResourceId:
        Ref: 'ExtractResource'
      RestApiId:
        Ref: 'ApiGatewayRestApi'
      Integration:
        Type: 'MOCK'
        RequestTemplates:
          application/json: '{statusCode:200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Image API
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  ImageResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      PathPart: 'image'
      RestApiId:
        Ref: 'ApiGatewayRestApi'

  ImagePostMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId:
        Ref: 'ImageResource'
      RestApiId:
        Ref: 'ApiGatewayRestApi'
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
            - LambdaArn:
                Fn::GetAtt:
                  - ImagePostLambda
                  - Arn
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ImageOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'OPTIONS'
      ResourceId:
        Ref: 'ImageResource'
      RestApiId:
        Ref: 'ApiGatewayRestApi'
      Integration:
        Type: 'MOCK'
        RequestTemplates:
          application/json: '{statusCode:200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Deployment
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId:
        Ref: 'ApiGatewayRestApi'
      StageName: 'prod'
    DependsOn: 
      - ExpensePostMethod
      - ExpenseGetMethod
      - ExpenseOptionsMethod
      - UserPostMethod
      - UserOptionsMethod
      - UserGetPostMethod
      - UserGetOptionsMethod
      - ProfilePostMethod
      - ProfileOptionsMethod
      - ExtractPostMethod
      - ExtractOptionsMethod
      - ImagePostMethod
      - ImageOptionsMethod

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Integrations
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  ExpenseInvokePermissionPost:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        Ref: 'ExpensePostLambda'
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn:
        Fn::Sub:
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/expense
          - ApiGatewayRestApi:
              Ref: 'ApiGatewayRestApi'

  ExpenseInvokePermissionGet:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        Ref: 'ExpenseGetLambda'
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn:
        Fn::Sub:
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/expense
          - ApiGatewayRestApi:
              Ref: 'ApiGatewayRestApi'

  UserInvokePermissionPost:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        Ref: 'UserPostLambda'
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn:
        Fn::Sub:
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/user
          - ApiGatewayRestApi:
              Ref: 'ApiGatewayRestApi'

  UserGetInvokePermissionPost:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        Ref: 'UserGetPostLambda'
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn:
        Fn::Sub:
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/userget
          - ApiGatewayRestApi:
              Ref: 'ApiGatewayRestApi'

  ProfileInvokePermissionPost:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        Ref: 'ProfilePostLambda'
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn:
        Fn::Sub:
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/profile
          - ApiGatewayRestApi:
              Ref: 'ApiGatewayRestApi'

  ExtractInvokePermissionPost:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        Ref: 'ExtractPostLambda'
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn:
        Fn::Sub:
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/extract
          - ApiGatewayRestApi:
              Ref: 'ApiGatewayRestApi'

  ImageInvokePermissionPost:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        Ref: 'ImagePostLambda'
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn:
        Fn::Sub:
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/image
          - ApiGatewayRestApi:
              Ref: 'ApiGatewayRestApi'

  ExpenseNotificationEventSourceMapping:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt 
        - ExpenseDataTable
        - StreamArn
      FunctionName: !Ref ExpenseNotificationLambda
      StartingPosition: "LATEST"

  RegisterNotificationLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref RegisterNotificationLambda
      Action: "lambda:InvokeFunction"
      Principal: "cognito-idp.amazonaws.com"
      SourceArn: !GetAtt CognitoUserPool.Arn

  LoginNotificationLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref LoginNotificationLambda
      Action: "lambda:InvokeFunction"
      Principal: "cognito-idp.amazonaws.com"
      SourceArn: !GetAtt CognitoUserPool.Arn

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# EC2 Instance
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: ami-0ba9883b710b05ac6 # Amazon Linux 2 AMI (Update this based on your region)
      SecurityGroupIds: [!Ref InstanceSecurityGroup]
      Tags:
        - Key: Name
          Value: !Ref InstanceName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo su
          yum update -y
          yum install docker -y
          yum install git -y
          service docker start
          chmod 666 /var/run/docker.sock
          docker pull b00977003/serverless-expense-tracker
          docker run -d -e REACT_APP_BASE_URL=https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod -e REACT_APP_USER_POOL_ID=${CognitoUserPool} -e REACT_APP_CLIENT_ID=${CognitoUserPoolClient} -p 80:3000 --name expense-tracker b00977003/serverless-expense-tracker

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Outputs
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Outputs:
  UserPoolId:
    Description: "The ID of the Cognito User Pool"
    Value: 
      Ref: "CognitoUserPool"

  UserPoolClientId:
    Description: "The ID of the Cognito User Pool Client"
    Value: 
      Ref: "CognitoUserPoolClient"

  UserPoolDomain:
    Description: "The Cognito User Pool Domain"
    Value: 
      Ref: "CognitoUserPoolDomain"

  ApiGatewayUrl:
    Description: "The URL of the API Gateway deployment"
    Value:
      Fn::Sub: "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod"

  EC2PublicURL:
    Description: "The public URL of the EC2 instance with port 80"
    Value:
      Fn::Sub: "http://${MyEC2Instance.PublicDnsName}:80"
  
  EC2PublicIP:
    Description: "The public IP address of the EC2 instance"
    Value:
      Fn::GetAtt: [ MyEC2Instance, PublicIp ]
